module StonePaperScissor (
    input clk,              // Clock signal
    input rst,              // Reset signal
    input [2:0] user_input, // User input (001: Stone, 010: Paper, 100: Scissor)
    input ButtonC,          // Button to confirm user's move
    output reg [6:0] seg,   // 7-segment display output
    output reg [3:0] anode, // Anode control for 7-segment display
    output reg win_led,     // LED to indicate win
    output reg lose_led     // LED to indicate lose
);

    reg [1:0] user_choice;  // User's choice (0: Stone, 1: Paper, 2: Scissor)
    reg [1:0] comp_choice;  // Computer's choice (0: Stone, 1: Paper, 2: Scissor)
    reg [31:0] counter;     // Counter for pseudo-random generation
    reg [31:0] display_counter; // Counter for 7-segment display timing
    reg [1:0] state;        // State machine state
    reg [6:0] seg_temp;     // Temporary 7-segment display value

    // State encoding
    localparam IDLE = 2'b00, USER_INPUT = 2'b01, COMP_CHOICE = 2'b10, DISPLAY_RESULT = 2'b11;

    // 7-segment display encoding
    localparam ST = 7'b0010010; // ST for Stone
    localparam P  = 7'b0001100; // P for Paper
    localparam SC = 7'b1000110; // SC for Scissor
    localparam WIN = 7'b1110111; // W for Win
    localparam LOSE = 7'b0111001; // L for Lose

    // Pseudo-random number generation
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            counter <= 32'h0;
        end else begin
            counter <= counter + 1;
        end
    end

    // State machine
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            state <= IDLE;
            user_choice <= 2'b00;
            comp_choice <= 2'b00;
            win_led <= 0;
            lose_led <= 0;
            display_counter <= 0;
            seg_temp <= 7'b0000000;
        end else begin
            case (state)
                IDLE: begin
                    if (ButtonC) begin
                        state <= USER_INPUT;
                    end
                end

                USER_INPUT: begin
                    case (user_input)
                        3'b001: user_choice <= 2'b00; // Stone
                        3'b010: user_choice <= 2'b01; // Paper
                        3'b100: user_choice <= 2'b10; // Scissor
                        default: user_choice <= 2'b00; // Default to Stone
                    endcase
                    state <= COMP_CHOICE;
                end

                COMP_CHOICE: begin
                    comp_choice <= counter[1:0] % 3; // Pseudo-random choice (0, 1, or 2)
                    state <= DISPLAY_RESULT;
                end

                DISPLAY_RESULT: begin
                    if (display_counter < 32'd300000000) begin // Hold for 3 seconds (adjust based on clock frequency)
                        display_counter <= display_counter + 1;
                        case (comp_choice)
                            2'b00: seg_temp <= ST; // Stone
                            2'b01: seg_temp <= P;  // Paper
                            2'b10: seg_temp <= SC; // Scissor
                        endcase
                    end else begin
                        display_counter <= 0;
                        state <= IDLE;
                        // Determine winner
                        if (user_choice == comp_choice) begin
                            win_led <= 0;
                            lose_led <= 0;
                        end else if ((user_choice == 2'b00 && comp_choice == 2'b10) || // Stone beats Scissor
                                    (user_choice == 2'b01 && comp_choice == 2'b00) || // Paper beats Stone
                                    (user_choice == 2'b10 && comp_choice == 2'b01)) begin // Scissor beats Paper
                            win_led <= 1;
                            lose_led <= 0;
                            seg_temp <= WIN;
                        end else begin
                            win_led <= 0;
                            lose_led <= 1;
                            seg_temp <= LOSE;
                        end
                    end
                end
            endcase
        end
    end

    // 7-segment display output
    always @(posedge clk) begin
        seg <= seg_temp;
        anode <= 4'b1110; // Activate the first 7-segment display
    end

endmodule